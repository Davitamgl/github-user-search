{"version":3,"sources":["components/card/card.component.jsx","components/navbar/navbar.component.jsx","components/form/form.component.jsx","App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["Card","repos","data","login","followers","following","public_repos","avatar_url","className","alt","src","href","target","rel","map","repo","Navbar","Form","handleSearch","handleSubmit","userExists","onSubmit","type","placeholder","onChange","App","useState","setData","setRepos","loading","setLoading","userInput","setUserInput","setUserExists","fetchData","url","a","fetch","respData","respRepos","json","dataJson","repoJson","name","slice","console","log","useEffect","CircularProgress","style","marginLeft","marginTop","e","value","preventDefault","Boolean","window","location","hostname","match","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.a8626f45.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { FiGithub } from \"react-icons/fi\";\r\n\r\nimport \"./card.styles.scss\";\r\n\r\nconst Card = ({\r\n  repos,\r\n  data: { login, followers, following, public_repos, avatar_url },\r\n}) => {\r\n  return (\r\n    <div className=\"card-container\">\r\n      <div className=\"top-part\"></div>\r\n      <div className=\"image-container\">\r\n        <img alt=\"i\" src={avatar_url}></img>\r\n      </div>\r\n      <div className=\"username-holder\">\r\n        <a\r\n          href={`https://github.com/${login}`}\r\n          target=\"_blank\"\r\n          rel=\"noreferrer\"\r\n        >\r\n          {login}\r\n        </a>\r\n      </div>\r\n      <div className=\"followers-following\">\r\n        <span className=\"followers\">Followers: {followers}</span>\r\n        <span className=\"following\">Following: {following} </span>\r\n      </div>\r\n      <div className=\"repository-quantity\">\r\n        <span>Repos: {public_repos}</span>\r\n      </div>\r\n      <div className=\"repo-container\">\r\n        {repos.map((repo) => {\r\n          return (\r\n            <a\r\n            key={repo}\r\n              className=\"repo-link\"\r\n              href={`https://github.com/${login}/${repo}`}\r\n              target=\"_blank\"\r\n              rel=\"noreferrer\"\r\n            >\r\n              <button  className=\"repo-list\">\r\n                <span className=\"github-icon-holder\">\r\n                  \r\n                  <FiGithub className=\"github-icon\" />\r\n                </span>\r\n                <span className=\"repos\">{repo}</span>\r\n              </button>\r\n            </a>\r\n          );\r\n        })}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n//\r\n//var result = repo.map( repoName => ({ text: repoName.name }));\r\nexport default Card;\r\n//      {myArr.map((a) => {return <div>A</div>;})}\r\n","import React from 'react'\r\nimport './navbar.styles.scss'\r\n\r\nconst Navbar = () => (\r\n<div className=\"navbar\">\r\n      <header>Github Search</header>\r\n    </div>\r\n    )\r\n    export default Navbar","import React from \"react\";\r\n\r\nimport \"./form.styles.scss\";\r\n\r\nconst Form = ({ handleSearch, handleSubmit, userExists }) => {\r\n  return (\r\n    <div>\r\n      <div className=\"form-container\">\r\n        <form className=\"search-form\" onSubmit={handleSubmit}>\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"Github username\"\r\n            onChange={handleSearch}\r\n          />\r\n          <button>Search</button>\r\n        </form>\r\n      </div>\r\n\r\n      <span >\r\n        {userExists ? <span></span> : <div className=\"user-exists\">User not found</div>}\r\n      </span>\r\n    </div>\r\n  );\r\n};\r\nexport default Form;\r\n","import React, { useState, useEffect } from \"react\";\r\n\r\nimport { CircularProgress } from \"@material-ui/core\";\r\nimport Card from \"./components/card/card.component\";\r\nimport Navbar from \"./components/navbar/navbar.component\";\r\nimport Form from \"./components/form/form.component\";\r\n\r\nimport \"./App.scss\";\r\n\r\nconst App = () => {\r\n  const [data, setData] = useState(\"\");\r\n  const [repos, setRepos] = useState(\"\");\r\n  const [loading, setLoading] = useState(true);\r\n  const [userInput, setUserInput] = useState(\"\");\r\n  const [userExists, setUserExists] = useState(true);\r\n\r\n  const fetchData = async (url) => {\r\n    try {\r\n      setLoading(true);\r\n      setUserExists(true)\r\n      const respData = await fetch(url);\r\n      const respRepos = await fetch(`${url}/repos`);\r\n\r\n      const dataJson = await respData.json();\r\n      const repoJson = await respRepos.json();\r\n\r\n      setData(dataJson);\r\n      setRepos(repoJson.map((repo) => repo.name).slice(0, 3));\r\n\r\n      setLoading(false);\r\n      \r\n    } catch (error) {\r\n      setUserExists(false);\r\n      setLoading(false);\r\n      console.log(\"error\", error);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchData(\"https://api.github.com/users/example\");\r\n  }, []);\r\n\r\n  const handleSearch = (e) => {\r\n    setUserInput(e.target.value);\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    fetchData(`https://api.github.com/users/${userInput}`);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {loading ? (\r\n        <div>\r\n          <CircularProgress style={{ marginLeft: \"50vw\", marginTop: \"20vh\" }} />\r\n        </div>\r\n      ) : (\r\n        <div className=\"App\">\r\n          <Navbar />\r\n          <Form\r\n            handleSearch={handleSearch}\r\n            handleSubmit={handleSubmit}\r\n            userExists={userExists}\r\n          />\r\n          <Card data={data} repos={repos} />\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n//<Card data={data} repos={repos} />\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.scss';\r\nimport App from './App';\r\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\n\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://cra.link/PWA\r\nserviceWorkerRegistration.unregister();\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}